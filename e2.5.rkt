#lang sicp
(define (cons x y)
  (* (power 2 x) (power 3 y)))
(define (power base exp)
  (define (iter n result)
    (if (= n 0)
        result
        (iter (- n 1) (* result base))))
  (iter exp 1))
(define (car z)
  (define (calculator n result)
    (let ((r (remainder n 2)))
      (if (= r 0)
          (calculator (/ n 2) (+ result 1))
          result)))
  (calculator z 0))
(define (cdr z)
  (define (calculator n result)
    (let ((r (remainder n 3)))
      (if (= r 0)
          (calculator (/ n 3) (+ result 1))
          result)))
  (calculator z 0))