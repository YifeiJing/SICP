#lang sicp
(define (make-vect x y)
  (cons x y))
(define (xcor-vect v)
  (car v))
(define (ycor-vect v)
  (cdr v))
(define (op-vect f)
  (lambda (v w)
    (cons (f (car v) (car w)) (f (cdr v) (cdr w)))))
(define add-vect (op-vect +))
(define sub-vect (op-vect -))
(define (scale-vect c v)
  (cons (* c (car v)) (* c (cdr v))))

;first constructor of frame
(define (make-frame origin edge1 edge2)
  (list origin edge1 edge2))
(define (origin-frame frame)
  (car frame))
(define (edge1-frame frame)
  (cadr frame))
(define (edge2-frame frame)
  (cadr (cdr frame)))

;second constructor of frame
(define (smake-frame origin edge1 edge2)
  (cons origin (cons edge1 edge2)))
(define (sorigin-frame frame)
  (car frame))
(define (sedge1-frame frame)
  (cadr frame))
(define (sedge2-frame frame)
  (cdr (cdr frame)))

;constructor for segment
(define (make-segment start end)
  (cons start end))
(define start-segment car)
(define end-segment cdr)

;e2.49
(define (segments->painter segment-list)
  (lambda (frame)
    (for-each
     (lambda (segment)
       (draw-line
        ((frame-coord-map frame)
        (start-segment segment))
        ((frame-coord-map frame)
         (end-segment segment))))
     segment-list)))
(define (frame-coord-map frame)
  (lambda (vector)
    (add-vect (origin-frame frame)
              (add-vect (scale-vect (xcor-vect vector) (edge1-frame frame))
                        (scale-vect (ycor-vect vector) (edge2-frame frame))))))
(define (draw-line start end)
  (newline)
  (display "A line from ")
  (display start)
  (display " to ")
  (display end))
(define (draw-outline frame)
  (let ((origin (make-vect 0 0))
        (edge1 (make-vect 0 1))
        (edge2 (make-vect 1 0))
        (vertex (make-vect 1 1)))
    ((segments->painter (list (make-segment origin edge1)
                             (make-segment origin edge2)
                             (make-segment edge1 vertex)
                             (make-segment edge2 vertex)))
     frame)))
(define (draw-x frame)
  (let ((origin (make-vect 0 0))
        (edge1 (make-vect 0 1))
        (edge2 (make-vect 1 0))
        (vertex (make-vect 1 1)))
    ((segments->painter (list (make-segment origin vertex)
                             (make-segment edge1 edge2)))
     frame)))
(define (draw-diamond frame)
  (let ((bottom (make-vect 0.5 0))
        (top (make-vect 0.5 1))
        (left (make-vect 0 0.5))
        (right (make-vect 1 0.5)))
    ((segments->painter (list (make-segment bottom right)
                             (make-segment bottom left)
                             (make-segment top right)
                             (make-segment top left)))
     frame)))