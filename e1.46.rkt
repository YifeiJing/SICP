#lang sicp
(define (iterative-improve good-enough? improve)
  (define (try x)
    (if (good-enough? x)
        x
        (try (improve x))))
  (lambda (guess)
    (try guess)))
(define (abs x)
  (if (> x 0) x (- x)))
(define (square x)
  (* x x))
(define (sqrt x)
  (define (good-enough? guess)
    (let ((tolerance 0.000001))
      (< (abs (- (square guess) x)) tolerance)))
  (define (improve guess)
    (/ (+ guess (/ x guess)) 2))
  ((iterative-improve good-enough? improve) 1.0))
(define (fixed-point f first-guess)
  (define (good-enough? guess)
    (let ((tolerance 0.00001))
      (< (abs (- (f guess) guess)) tolerance)))
  ((iterative-improve good-enough? f) first-guess))