#lang sicp
(define (make-mobile left right)
  (cons left right))
(define (make-branch length structure)
  (cons length structure))
(define (left-branch x)
  (car x))
(define (right-branch x)
  (cdr x))
(define (branch-length x)
  (car x))
(define (branch-structure x)
  (cdr x))
(define (total-weight x)
  (define (iter branch)
    (let ((structure (branch-structure branch)))
    (if (pair? structure)
        (total-weight structure)
        structure)))
  (+ (iter (left-branch x))
     (iter (right-branch x))))
(define astr (make-mobile
              (make-branch 10
                           (make-mobile (make-branch 10 10)
                                        (make-branch 20 10)))
              (make-branch 40
                           5)))
(total-weight astr)
(define (balanced? x)
  (define (torque length weight)
    (* length weight))
  (define (mobile? structure)
    (pair? structure))
  (define (hasmobile? branch)
    (mobile? (branch-structure branch)))
  (define (iter branch)
    (let ((structure (branch-structure branch))
          (length (branch-length branch)))
      (if (mobile? structure)
          (torque length (total-weight structure))
          (torque length structure))))
  (let ((left (left-branch x))
        (right (right-branch x)))
    (cond ((and (hasmobile? left) (hasmobile? right))
           (and (balanced? (branch-structure left))
                (balanced? (branch-structure right))
                (= (iter left)
                   (iter right))))
          ((hasmobile? left)
           (and (balanced? (branch-structure left))
                (= (iter left)
                   (iter right))))
          ((hasmobile? right)
           (and (balanced? (branch-structure right))
                (= (iter left)
                   (iter right))))
          (else (= (iter left)
                   (iter right))))))
(balanced? astr)