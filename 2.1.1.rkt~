#lang sicp
(define (make-rat n d)
  (let ((divisor (gcd n d)))
    (cons (/ n divisor) (/ d divisor))))
(define (numer x) (car x))
(define (denom x) (cdr x))
(define (add-rat x y)
  (make-rat (+ (* (numer x) (denom y)) (* (denom x) (numer y))) (* (denom x) (denom y))))
(define (sub-rat x y)
  (make-rat
   (- (* (numer x) (denom y)) (* (denom x) (numer y))) (* (denom x) (denom y))))
(define (mul-rat x y)
  (make-rat (* (numer x) (numer y)) (* (denom x) (denom y))))
(define (div-rat x y)
  (make-rat (* (numer x) (denom y)) (* (denom x) (numer y))))
(define (equal-rat? x y)
  (= (* (numer x) (denom y)) (* (denom x) (numer y))))
(define (print-rat x)
  (newline)
  (display (numer x))
  (display "/")
  (display (denom x)))
(define (gcd x y)
  (if (= y 0)
      x
      (gcd y (remainder x y))))
(define one-half (make-rat 1 2))
(print-rat one-half)
(define one-third (make-rat 1 3))
(print-rat (add-rat one-third one-third))
