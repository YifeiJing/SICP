#lang sicp
(define (square a)
  (* a a))
(define (fast-expt-iter b n p)
  (cond ((= n 0) p)
        ((even? n) (fast-expt-iter (square b) (/ n 2) p))
        (else (fast-expt-iter b (- n 1) (* p b)))))
(define (even? n)
  (= (remainder n 2) 0))
(define (fast-expt b n)
  (fast-expt-iter b n 1))
(define fe fast-expt)

(define (time-value base exp m)
  (define start (runtime))
  (remainder (fast-expt base exp) m)
  (display " **")
  (display (- (runtime) start)))
(define tv time-value)
