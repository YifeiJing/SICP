#lang sicp
(define (sum? exp)
  (and (pair? exp) (eq? (cadr exp) '+)))
(define (addend exp)
  (car exp))
(define (augend exp)
  (caddr exp))
(define (make-sum a b)
  (cond ((=number? a 0) b)
        ((=number? b 0) a)
        ((and (number? a) (number? b)) (+ a b))
        (else (list a '+ b))))
(define (=number? exp num)
  (and (number? exp) (= exp num)))
; product
(define (product? exp)
  (and (pair? exp) (eq? (cadr exp) '*)))
(define (multiplier exp)
  (car exp))
(define (multiplicand exp)
  (caddr exp))
(define (make-product a b)
  (cond ((or (=number? a 0) (=number? b 0)) 0)
        ((=number? a 1) b)
        ((=number? b 1) a)
        ((and (number? a) (number? b)) (* a b))
        (else (list a '* b))))

