#lang sicp
(define (compose f g)
  (lambda (x) (f (g x))))
(define (repeated f n)
  (define (iter n result)
    (if (= n 0)
        result
        (iter (- n 1) (compose f result))))
  (iter (- n 1) f))
(define tolerance 0.00001)
(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2)) tolerance))
  (define (try guess)
    (newline)
    (display " try: ")
    (display guess)
    (let ((next (f guess)))
      (if (close-enough? guess next)
          next
          (try next))))
  (try first-guess))
(define (average-damp f)
  (lambda (x) (/ (+ x (f x)) 2)))
(define (power x n)
  (if (= n 0)
      1
      (* x (power x (- n 1)))))
(define (nth-root-converger x n)
  (lambda (y) (/ x (power y (- n 1)))))
(define (nth-root x n)
  (if (< n 4)
      (fixed-point (average-damp (nth-root-converger x n)) 1.0)
      (fixed-point ((repeated average-damp (- n 2)) (nth-root-converger x n)) 1.0)))