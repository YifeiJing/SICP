#lang sicp
(define (accumulate f base-value list)
  (if (null? list)
      base-value
      (f (car list)
         (accumulate f base-value (cdr list)))))
(define (map p sequence)
  (accumulate (lambda (x y) (cons (p x) y)) nil sequence))
(define l (list 1 2 3 4 5))
(define (square i)
  (* i i))
(define (append seq1 seq2)
  (accumulate cons seq2 seq1))
(define (length sequence)
  (accumulate (lambda (x y) (+ 1 y)) 0 sequence))
(define (test)
  (display (map square l))
  (define ll (list 2 4 5))
  (display (append l ll))
  (length ll))
(define (horner-eval x coefficient-sequence)
  (accumulate (lambda (this-coeff higher-terms)
                (+ this-coeff (* x higher-terms)))
              0
              coefficient-sequence))
