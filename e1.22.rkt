#lang sicp
(define (timed-prime-test n)
  (newline)
  (display n)
  (start-prime-test n (runtime)))
(define (start-prime-test n start-time)
  (if (prime? n)
      (report-prime (- (runtime) start-time))))
(define (report-prime elapsed-time)
  (display " *** ")
  (display elapsed-time))
(define (prime? n)
  (= (sd n) -1))
(define (smallest-divider n)
  (divider-iter n 2))
(define (square n)
  (* n n))
(define (divider-iter n a)
  (cond ((> (square a) n) -1)
        ((= (remainder n a) 0) a)
        (else (divider-iter n (next a)))))
(define (next a)
  (if (= a 2) 3 (+ a 2)))
(define sd smallest-divider)
(define (search-for-primes n a)
  (cond ((= n 0) (display " completed "))
        (else (test-prime a (runtime) n))))
(define (test-prime a start-time n)
  (if (prime? a)
      (print-prime (- (runtime) start-time) a n)
      (search-for-primes n (+ a 2))))
(define sfp search-for-primes)
(define (print-prime time-elapsed a n)
  (display " *** ")
  (display a)
  (display "  ")
  (display time-elapsed)
  (search-for-primes (- n 1) (+ a 2)))