#lang sicp
(define (filtered-accumulate combiner null-value filter term a next b)
  (if (> a b)
      null-value
      (if (filter a)
          (combiner (term a)
                    (filtered-accumulate combiner null-value filter
                                         term (next a) next b))
          (filtered-accumulate combiner null-value filter
                                         term (next a) next b))))
(define (sum a b)
  (define (inc i)
    (+ i 1))
  (define (prime? i)
    (define (next x)
      (if (= x 2) 3 (+ x 2)))
    (define (divider i n)
      (cond ((> (square n) i) true)
            ((= (remainder i n) 0) false)
            (else (divider i (next n)))))
    (divider i 2))
  (filtered-accumulate + 0 prime? identity a inc b))
(define (square i)
  (* i i))
