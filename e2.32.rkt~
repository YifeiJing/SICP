#lang sicp
(define (subsets s)
  (if (null? s)
      (list nil)
      (let ((rest (subsets (cdr s))))
        (append rest (map (lambda (l)
                            (cons (car s) l)) rest)))))
(define (print-tree tree)
  (cond ((null? tree) (display ")"))
        ((pair? (car tree))
         (display "(")
         (print-tree (car tree))
         (print-tree (cdr tree)))
        (else
         (display tree))))
(print-tree (subsets (list 1 2 3)))
