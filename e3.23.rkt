#lang sicp
;'(item prev next)
(define (make-deque)
  (cons '() '()))
(define (empty-deque? queue)
  (null? (car queue)))
(define (front-deque queue)
  (if (empty-deque? queue)
      (error "Empty queue")
      (car (car queue))))
(define (rear-deque queue)
  (if (empty-deque? queue)
      (error "Empty queue")
      (car (cdr queue))))
(define (front-insert-deque! queue item)
  (let ((new-pair (list item '() '()))
        (head (car queue))
        (rear (cdr queue)))
    (if (empty-deque? queue)
        (begin (set! head new-pair)
               (set! rear new-pair))
        (let ((next (cddr new-pair))
              (prev (cdr head)))
          (set-car! next head)
          (set-car! prev new-pair)
          (set! head new-pair)))
    (set-car! queue head)
    (set-cdr! queue rear)))
(define (rear-insert-deque! queue item)
  (let ((new-pair (list item '() '()))
        (head (car queue))
        (rear (cdr queue)))
    (if (empty-deque? queue)
        (begin (set! head new-pair)
               (set! rear new-pair))
        (let ((next (cddr rear))
              (prev (cdr new-pair)))
          (set-car! next new-pair)
          (set-car! prev rear)
          (set! rear new-pair)))
    (set-car! queue head)
    (set-cdr! queue rear)))
(define (front-delete-deque! queue)
  (if (empty-deque? queue)
      (error "Empty queue")
      (let ((head (car queue))
            (next (car (cddr (car queue)))))
        (let ((prev (cdr next)))
          (set-car! prev '())
          (set! head next))
        (set-car! queue head)
    )))
(define (rear-delete-deque! queue)
  (if (empty-deque? queue)
      (error "Empty queue")
      (let ((rear (cdr queue))
            (prev (car (cdr (cdr queue)))))
        (let ((next (cddr prev)))
          (set-car! next '())
          (set! rear prev))
    (set-cdr! queue rear))))
(define (print-deque queue)
  (if (empty-deque? queue)
      (display "()")
      (let ((head (car queue))
            (rear (cdr queue)))
        (display "(")
        (define (iter node)
          (if (eq? node rear)
              (display (car node))
              (let ((next (cddr node)))
                (display (car node))
                (display " ")
                (iter (car next)))))
        (iter head)
        (display ")"))))
;Test
(define Q (make-deque))

(front-insert-deque! Q 1)
(front-insert-deque! Q 2)
(print-deque Q)
(rear-insert-deque! Q 3)
(print-deque Q)
(front-delete-deque! Q)
(print-deque Q)
(rear-delete-deque! Q)
(print-deque Q)