#lang racket
(define (estimate-integral P x1 x2 y1 y2 trials)
  (* 4.0 (monte-carlo trials (P x1 x2 y1 y2))))
(define (random-in-range low high)
  (let ((range (- high low)))
    (+ low (random range))))
(define (square x)
  (* x x))
(define (monte-carlo trials experiment)
  (define (iter trials-remaining trials-passed)
    (cond ((= trials-remaining 0)
           (/ trials-passed trials))
          ((experiment)
           (iter (- trials-remaining 1)
                 (+ trials-passed 1)))
          (else
           (iter (- trials-remaining 1)
                 trials-passed))))
  (iter trials 0))
(estimate-integral (lambda (x1 x2 y1 y2)
                     (lambda ()
                     (let ((x0 (/ (+ x1 x2) 2))
          (y0 (/ (+ y1 y2) 2))
          (x (random-in-range x1 x2))
          (y (random-in-range y1 y2)))
      (<= (+ (square (- x0 x)) (square (- y0 y))) 1))))
                   0 2 0 2 8000)