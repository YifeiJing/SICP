#lang sicp
(define (gcd a b)
  (cond ((= b 0) a)
        (else (gcd b (remainder a b)))))
(define (expmod base exp m)
  (cond ((= exp 0) 1)
        ((even? exp)
         (remainder
         (square (expmod base (/ exp 2) m)) m))
        (else (remainder
               (* base (expmod base (- exp 1) m)) m))))
(define (square a)
  (* a a))
(define (even? a)
  (= (remainder a 2) 0))
(define (fast-prime? a)
  (try-prime a 10 2))
(define (try-prime a n start)
  (cond ((= n 0) #t)
        ((= (expmod start a a) start)
         (try-prime a (- n 1) (next start a)))
        (else #f)))
(define (next start a)
  (define temp (+ 1 (random (- a 1))))
  (if (= temp start)
      (next start a)
      temp))
(define (time-valued base exp m)
  (define start (runtime))
  (expmod base exp m)
  (display " **")
  (display (- (runtime) start)))
(define tv time-valued)
