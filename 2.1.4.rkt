#lang sicp
(define (make-interval a b) (cons a b))
(define (upper-bound z) (cdr z))
(define (lower-bound z) (car z))
(define (add-interval x y)
  (make-interval (+ (lower-bound x) (lower-bound y))
                 (+ (upper-bound x) (upper-bound y))))
(define (mul-interval x y)
  (let ((p1 (* (lower-bound x) (lower-bound y)))
        (p2 (* (lower-bound x) (upper-bound y)))
        (p3 (* (upper-bound x) (lower-bound y)))
        (p4 (* (upper-bound x) (upper-bound y))))
    (make-interval (min p1 p2 p3 p4)
                   (max p1 p2 p3 p4))))
(define (div-interval x y)
  (mul-interval
   x
   (make-interval (/ 1.0 (upper-bound y))
                  (/ 1.0 (lower-bound y)))))
(define (sub-interval x y)
 (let ((p1 (- (lower-bound x) (lower-bound y)))
        (p2 (- (lower-bound x) (upper-bound y)))
        (p3 (- (upper-bound x) (lower-bound y)))
        (p4 (- (upper-bound x) (upper-bound y))))
    (make-interval (min p1 p4)
                   (max p1 p4))))
(define (width-interval x)
  (/ (- (upper-bound x) (lower-bound x)) 2))
(define itva (make-interval 1.0 4))
(define itvb (make-interval 6.0 16))
(define (width-of-combination f x y)
  (f (width-interval x) (width-interval y)))
(define (print-interval x)
  (newline)
  (display "lower bound:")
  (display (lower-bound x))
  (newline)
  (display "upper bound:")
  (upper-bound x))
(define (widcalc)
(newline)
(display "sum")
(width-of-combination + itva itvb)
(newline)
(display "sub")
(width-of-combination - itva itvb)
(define sum-ab (add-interval itva itvb))
(define sub-ab (sub-interval itva itvb))
(newline)
(display "sum")
(width-interval sum-ab)
(newline)
(display "sub")
(width-interval sub-ab)
(print-interval sum-ab)
(print-interval sub-ab)
(print-interval itva)
(print-interval itvb))
(define (make-center-percent c p)
  (make-interval (- c (* c p)) (+ c (* c p))))
(define (percent x)
  (* (/ (/ (- (upper-bound x) (lower-bound x)) 2) (center x)) 100))
(define (center x)
  (/ (+ (upper-bound x) (lower-bound x)) 2))