#lang sicp
(define (sum-integers a b)
  (if (> a b)
      0
      (+ a (sum-integers (+ a 1) b))))
(define (cube-sum a b)
  (if (> a b)
      0
      (+ (cube a)
         (cube-sum (+ a 1) b))))
(define (cube a)
  (* a a a))
(define (pi-sum a b)
  (if (> a b)
      0
      (+ (/ 1.0 (* a (+ a 2)))
         (pi-sum (+ a 4) b))))
(define (sum term a next b)
  (if (> a b)
      0
      (+ (term a)
         (sum term (next a) next b))))
(define (sum-int a b)
  (sum identity a inc b))
(define (inc i)
  (+ i 1))
(define (sum-cube a b)
  (sum cube a inc b))
(define (sum-pi a b)
  (define (pi-term a)
    (/ 1 (* a (+ a 2))))
  (define (pi-next a)
    (+ a 4))
  (sum pi-term a pi-next b))