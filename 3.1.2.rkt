#lang racket
(define random-init 0)
(define (estimate-pi trials)
  (sqrt (/ 6 (monte-carlo trials cesaro-test))))
(define (cesaro-test)
  (= (gcd (rand) (rand)) 1))
(define rand
  (let ((x random-init))
    (lambda ()
      (set! x (rand-update x))
      x)))
(define (monte-carlo trials experiment)
  (define (iter trials-remaining trials-passed)
    (cond ((= trials-remaining 0)
           (/ trials-passed trials))
          ((experiment)
           (iter (- trials-remaining 1)
                 (+ trials-passed 1)))
          (else
           (iter (- trials-remaining 1)
                 trials-passed))))
  (iter trials 0))

(define (rand-update x)
  (let ((a 37)
        (b 97)
        (m 1000))
    (remainder (+ (* x a) b) m)))
;;(estimate-pi 1000)
(define (trial n)
  (define (iter n)
    (cond ((= 0 n)
           (display " end!"))
          (else
           (let ((x (rand)))
             (display " ")
             (display x)
             (iter (- n 1))))))
  (iter n))
(trial 100)