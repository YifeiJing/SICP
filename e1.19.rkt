#lang sicp
(define (p-trans p q)
  (+ (square q) (square p)))
(define (square a)
  (* a a))
(define (q-trans p q)
  (+ (* 2 p q) (square q)))
(define (fib-iter a b p q count)
  (cond ((= count 0) b)
        ((even? count)
         (fib-iter a b (p-trans p q) (q-trans p q) (/ count 2)))
        (else (fib-iter (+ (* b q) (* a q) (* a p))
                        (+ (* b p) (* a q))
                        p
                        q
                        (- count 1)))))
(define (fib n)
  (fib-iter 1 0 0 1 n))
(define (even? a)
  (= (remainder a 2) 0))
