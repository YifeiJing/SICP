#lang sicp
(define (install-project-package)
  (define (project-complex z)
    (tag (real-part z) 'real))
  (define (project-real r)
    (tag (make-rational (* r 100000000) 100000000) 'rational))
  (define (project-rational x)
    (tag (round (/ (numer x) (denom x))) 'scheme-number))
  ;; intallation
  (put 'project 'complex project-complex)
  (put 'project 'real project-real)
  (put 'project 'rational project-rational)
  'done)
(define (simplify x)
  (let ((project (get 'project (type-tag x))))
    (if project
        (let ((projection (project (contents x))))
          (let ((raise (get 'raise (type-tag projection))))
            (let ((raised (raise (contents projection))))
              (if (eq? x raised)
                  (simplify projection)
                  x))))
        x)))
(define (apply-generic op . args)
  (let ((type-tags (map type-tag args)))
    (let ((proc (get op type-tags)))
      (if proc
          (simplify (apply proc (map contents args)))
          (if (= (length args) 2)
              (let ((supertype (which-is-higher? (car type-tags) (cdar type-tags))))
                (if (= supertype 1)
                    (simplify (apply (get op (list (car type-tags) (car type-tags))) (list (contents (car args)) (raise (contents (cdar args)) (car type-tags)))))
                    (simplify (apply (get op (list (cdar type-tags) (cdar type-tags))) (list (raise (contents (car args)) (cdar type-tags)) (contents (cdar args)))))))
              (error "multiple args raising not implemented"))))))