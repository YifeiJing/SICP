#lang sicp
(define (search f posepoint negapoint)
  (let ((midpoint (/ (+ posepoint negapoint) 2)))
    (if (close-enough? posepoint negapoint)
        midpoint
        (let ((value (f midpoint)))
          (cond ((positive? value)
                 (search f midpoint negapoint))
                ((negative? value)
                 (search f posepoint midpoint))
                (else midpoint))))))
(define (close-enough? a b)
  (< (abs (- a b)) 0.001))
(define (posetive? a)
  (> a 0))
(define (negative? a)
  (< a 0))
(define (abs a)
  (if (posetive? a) a (- a)))
(define (half-interval-method f a b)
  (let ((a-value (f a))
        (b-value (f b)))
    (cond ((and (negative? a-value) (posetive? b-value))
           (search f b a))
          ((and (negative? b-value) (posetive? a-value))
           (search f a b))
          (else (error "Values are not of opposite sign" a b)))))
(define tolerance 0.00001)
(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2)) tolerance))
  (define (try guess)
    (newline)
    (display " try: ")
    (display guess)
    (let ((next (f guess)))
      (if (close-enough? guess next)
          next
          (try next))))
  (try first-guess))
