#lang sicp
(define (half-adder a b s c)
  (let ((s1 (make-wire))
        (s2 (make-wire))
        (a1 (make-wire))
        (a2 (make-wire)))
    (inverter a s1)
    (inverter b s2)
    (and-gate s1 b a1)
    (and-gate a s2 a2)
    (or-gate a1 a2 s)
    (and-gate a b c))'ok)
(define (half-adder-official a b s c)
  (let ((d (make-wire)) (e (make-wire)))
    (or-gate a b d)
    (and-gate a b c)
    (inverter c e)
    (and-gate d e s)
    'ok))
(define (full-adder a b c-in sum c-out)
  (let ((s (make-wire)) (c1 (make-wire)) (c2 (make-wire)))
    (half-adder b c-in s c1)
    (half-adder a s sum c2)
    (or-gate c1 c2 c-out)
    'ok))
(define (inverter input output)
  (define (invert-input)
    (let ((new-value (logical-not (get-signal input))))
      (after-delay inverter-delay
                   (lambda () (set-signal! output new-value)))))
  (add-action! input invert-input) 'ok)
(define (logical-not signal)
  (if (= signal 0) 1
      (if (= signal 1) 0
          (error "Invalid signal" signal))))
(define (logical-and a b)
  (if (or (not (number? a)) (not (number? b)))
      (error "Invalid input to logical-and" a)
      (if (and (= a 0) (= b 0))
          0
          (if (and (= a 0) (= b 1))
              0
              (if (and (= a 1) (= b 0))
                  0
                  (if (and (= a 1) (= b 1))
                      1
                      (error "Invalid input to logical-and" a)))))))
(define (logical-or a b)
  (logical-not (logical-and (logical-not a) (logical-not b))))
(define (and-gate in1 in2 out)
  (define (and-action-procedure)
    (let ((new-value
           (logical-and (get-signal in1) (get-signal in2))))
      (after-delay
       and-gate-delay
       (lambda () (set-signal! out new-value)))))
  (add-action! in1 and-action-procedure)
  (add-action! in2 and-action-procedure)
  'ok)
(define (or-gate in1 in2 out)
  (define (or-action-procedure)
    (let ((new-value (logical-or (get-signal in1) (get-signal in2))))
      (after-delay
       or-gate-delay
       (lambda () (set-signal! out new-value)))))
  (add-action! in1 or-action-procedure)
  (add-action! in2 or-action-procedure)
  'ok)
(define (or-gate-alter in1 in2 out)
  (let ((s1 (make-wire))
        (s2 (make-wire)))
    (inverter in1 s1)
    (inverter in2 s2)
    (and-gate s1 s2 out))
  'ok)
(define (make-wire)
  (let ((signal-value 0) (action-procedures '()))
    (define (set-my-signal! new-value)
      (if (not (= signal-value new-value))
          (begin (set! signal-value new-value)
                 (call-each action-procedures))
          'done))
    (define (accept-action-procedure! proc)
      (set! action-procedures
            (cons proc action-procedures))
      (proc))
    (define (dispatch m)
      (cond ((eq? m 'get-signal) signal-value)
            ((eq? m 'set-signal!) set-my-signal!)
            ((eq? m 'add-action!) accept-action-procedure!)
            (else (error "Unknown operation: WIRE" m))))
  dispatch))
(define (get-signal wire)
  (wire 'get-signal))
(define (call-each procedures)
  (if (null? procedures)
      'done
      (begin ((car procedures))
             (call-each (cdr procedures)))))
(define (set-signal! wire new-value)
  ((wire 'set-signal!) new-value))
(define (add-action! wire action)
  ((wire 'add-action!) action))
(define (after-delay delay action)
  (add-to-agenda! (+ delay (current-time the-agenda))
                  action
                  the-agenda))
(define (make-time-segment time queue)
  (cons time queue))
(define (segment-time s) (car s))
(define (segment-queue s) (cdr s))
(define (make-agenda) (list 0))
(define (current-time agenda)
  (car agenda))
(define (set-current-time! agenda time)
  (set-car! agenda time))
(define (segments agenda) (cdr agenda))
(define (set-segments! agenda segments)
  (set-cdr! agenda segments))
(define (first-segment agenda) (car (segments agenda)))
(define (rest-segments agenda) (cdr (segments agenda)))
(define (empty-agenda? agenda)
  (null? (segments agenda)))
(define (make-queue)
  (let ((queue (list 'tail)))
    (define (insert-queue! action)
      (set! queue (cons action queue)))
    (define (front-queue)
      (define (iter q)
        (if (eq? (cadr q) 'tail)
            (car q)
            (iter (cdr q))))
      (if (eq? (car queue) 'tail)
          (error "ERROR: find element from empty queue")
          (iter queue)))
    (define (delete-queue!)
      (let ((head (front-queue)))
        (define (iter q)
          (if (eq? (cadr q) head)
              (set-cdr! q (cons'tail '()))
              (iter (cdr q))))
        (if (eq? (car queue) head)
            (begin (set-car! queue 'tail)
                   (set-cdr! queue '()))
            (iter queue))))
    (define (empty-queue?)
      (eq? (car queue) 'tail))
    (define (dispatch m)
      (cond ((eq? m 'insert-queue!) insert-queue!)
            ((eq? m 'front-queue) front-queue)
            ((eq? m 'delete-queue!) delete-queue!)
            ((eq? m 'empty-queue?) empty-queue?)
            (else (error "Invalid message for queue" m))))
    dispatch))
(define (insert-queue! q action)
  ((q 'insert-queue!) action))
(define (front-queue q)
  ((q 'front-queue)))
(define (delete-queue! q)
  ((q 'delete-queue!)))
(define (empty-queue? q)
  ((q 'empty-queue?)))
(define (add-to-agenda! time action agenda)
  (define (belongs-before? segments)
    (or (null? segments)
        (< time (segment-time (car segments)))))
  (define (make-new-time-segment time action)
    (let ((q (make-queue)))
      (insert-queue! q action)
      (make-time-segment time q)))
  (define (add-to-segments! segments)
    (if (= (segment-time (car segments)) time)
        (insert-queue! (segment-queue (car segments))
                      action)
        (let ((rest (cdr segments)))
          (if (belongs-before? rest)
              (set-cdr!
               segments
               (cons (make-new-time-segment time action)
                     (cdr segments)))
              (add-to-segments! rest)))))
;  (display "Add to agenda!") (display time)
  (let ((segments (segments agenda)))
    (if (belongs-before? segments)
        (set-segments!
         agenda
         (cons (make-new-time-segment time action)
               segments))
        (add-to-segments! segments))))
(define (first-agenda-item agenda)
  (if (empty-agenda? agenda)
      (error "Agenda is empty: FIRST_AGENDA_ITEM")
      (let ((first-seg (first-segment agenda)))
        (set-current-time! agenda
                           (segment-time first-seg))
        (front-queue (segment-queue first-seg)))))
(define (remove-first-agenda-item! agenda)
  (let ((q (segment-queue (first-segment agenda))))
    (delete-queue! q)
    (if (empty-queue? q)
        (set-segments! agenda (rest-segments agenda)))))
(define (propagate)
  (if (empty-agenda? the-agenda)
      'done
      (let ((first-term (first-agenda-item the-agenda)))
        (first-term)
        (remove-first-agenda-item! the-agenda)
        (propagate))))
(define (probe name wire)
  (add-action! wire
               (lambda ()
                 (newline)
                 (display name) (display " ")
                 (display (current-time the-agenda))
                 (display "  New-value = ")
                 (display (get-signal wire)))))
(define the-agenda (make-agenda))
(define inverter-delay 2)
(define and-gate-delay 3)
(define or-gate-delay 5)

(define input-1 (make-wire))
(define input-2 (make-wire))
(define input-3 (make-wire))
(define sum (make-wire))
(define carry (make-wire))
(probe 'sum sum)
(probe 'carry carry)
(half-adder input-1 input-2 sum carry)
;(inverter input-1 sum)
;(full-adder input-1 input-2 input-3 sum carry)
(propagate)
(display "====>Circuit connection complete<====")
(newline)
(set-current-time! the-agenda 0)
(set-signal! input-1 1)
(set-signal! input-2 1)
(propagate)