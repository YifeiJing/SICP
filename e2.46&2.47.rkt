#lang sicp
(define (make-vect x y)
  (cons x y))
(define (xcor-vect v)
  (car v))
(define (ycor-vect v)
  (cdr v))
(define (op-vect f)
  (lambda (v w)
    (cons (f (car v) (car w)) (f (cdr v) (cdr w)))))
(define add-vect (op-vect +))
(define sub-vect (op-vect -))
(define (scale-vect c v)
  (cons (* c (car v)) (* c (cdr v))))

;first constructor of frame
(define (make-frame origin edge1 edge2)
  (list origin edge1 edge2))
(define (origin-frame frame)
  (car frame))
(define (edge1-frame frame)
  (cadr frame))
(define (edge2-frame frame)
  (cadr (cdr frame)))

;second constructor of frame
(define (smake-frame origin edge1 edge2)
  (cons origin (cons edge1 edge2)))
(define (sorigin-frame frame)
  (car frame))
(define (sedge1-frame frame)
  (cadr frame))
(define (sedge2-frame frame)
  (cdr (cdr frame)))