#lang sicp
(define (accumulate f base-value list)
  (if (null? list)
      base-value
      (f (car list)
         (accumulate f base-value (cdr list)))))
(define l (list 1 2 3 4 5))
(define (square i)
  (* i i))
(define (append seq1 seq2)
  (accumulate cons seq2 seq1))
(define (length sequence)
  (accumulate (lambda (x y) (+ 1 y)) 0 sequence))
(define (test)
  (display (map square l))
  (define ll (list 2 4 5))
  (display (append l ll))
  (length ll))
(define (horner-eval x coefficient-sequence)
  (accumulate (lambda (this-coeff higher-terms)
                (+ this-coeff (* x higher-terms)))
              0
              coefficient-sequence))
(define (enumerate-tree tree)
  (cond ((null? tree) nil)
        ((not (pair? tree)) (list tree))
        (else (append (enumerate-tree (car tree))
                      (enumerate-tree (cdr tree))))))
(define (count-leaves t)
  (accumulate + 0 (map (lambda (x) 1) (enumerate-tree t))))
(count-leaves (list 1 (list 2 (list 3 4)) 5))
(define (get-the-first-row seqs)
  (define (iter t)
    (if (null? t)
        nil
        (append (list (car (car t)))
                (iter (cdr t)))))
  (iter seqs))
(define (remove-the-first-row seqs)
  (define (iter t)
    (if (null? t)
        nil
        (cons (cdr (car t))
                (iter (cdr t)))))
  (iter seqs))
(define (accumulate-n op init seqs)
  (if (null? (car seqs))
      nil
      (cons (accumulate op init (get-the-first-row seqs))
            (accumulate-n op init (remove-the-first-row seqs)))))
(define matrix (list (list 1 2 3) (list 4 5 6) (list 7 8 9) (list 10 11 12)))
(display (accumulate-n + 0 matrix))
(define (matrix-*-vector m v)
  (map (lambda (x)
         (dot-product v x))
       m))
(define (dot-product v w)
  (accumulate + 0 (map * v w)))
(define mat (list (list 1 2 3 4) (list 4 5 6 6) (list 6 7 8 9)))
(define v (list 1 2 3 4))
(display (matrix-*-vector mat v))
(define (transpose mat)
  (accumulate-n (lambda (x y)
                  (cons x y))
                nil
                mat))
(define mat2 (list (list 1 2 3) (list 4 5 6) (list 7 8 9)))
(display (transpose mat2))
(define (matrix-*-matrix m n)
  (let ((cols (transpose n)))
    (map (lambda (x)
           (matrix-*-vector cols x))
         m)))
(display (matrix-*-matrix mat2 mat))
(define (fold-left f initial seq)
  (define (iter result rest)
    (if (null? rest)
        result
        (iter (f result (car rest))
              (cdr rest))))
  (iter initial seq))
(define fold-right accumulate)
(define (reverse-r seq)
  (fold-right (lambda (x y)
                (append y (list x)))
              nil
              seq))
(define (reverse-l seq)
  (fold-left (lambda (x y)
               (cons y x))
             nil
             seq))
(define seq (list 1 2 3 4 5 6))
(display (reverse-r seq))
(display (reverse-l seq))
