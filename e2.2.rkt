#lang sicp
(define (make-point x y) (cons x y))
(define (x-point x) (car x))
(define (y-point x) (cdr x))
(define (make-segment a b) (cons a b))
(define (start-segment x) (car x))
(define (end-segment x) (cdr x))
(define (print-point x)
  (newline)
  (display "(")
  (display (x-point x))
  (display " , ")
  (display (y-point x))
  (display ")"))
(define (print-segment x)
  (print-point (start-segment x))
  (print-point (end-segment x)))
(define (midpoint-segment x)
  (make-point (/ (+ (x-point (start-segment x)) (x-point (end-segment x))) 2)
              (/ (+ (y-point (start-segment x)) (y-point (end-segment x))) 2)))
(define (abs x)
  (if (> x 0) x (- x)))
(define (square x)
  (* x x))
(define (sqrt x)
  (define tolerance 0.00001)
  (define (calculator y)
    (/ (+ y (/ x y)) 2))
  (define (try a)
    (let ((next (calculator a)))
      (if (< (abs (- next a)) tolerance)
          next
          (try next))))
  (try 1.0))
        
(define (distance-point a b)
  (sqrt (+ (square (- (x-point a) (x-point b))) (square (- (y-point a) (y-point b))))))