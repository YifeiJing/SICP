#lang sicp
(define (average-dump f)
  (lambda (x) (/ (+ x (f x)) 2)))
(define (fixed-point f n)
  (define tolerance 0.0001)
  (define (abs i)
    (if (> i 0) i (- i)))
  (let ((next (f n)))
    (if (< (abs (- next n)) tolerance)
        next
        (fixed-point f next))))
(define (sqrt x)
  (fixed-point (average-dump (lambda (y) (/ x y))) 1.0))
(define (deriv f)
  (define dx 0.00001)
  (lambda (x) (/ (- (f (+ x dx)) (f x)) dx)))
(define (cube x)
  (* x x x))
(define (newton-transform g)
  (lambda (x) (- x (/ (g x) ((deriv g) x)))))
(define (newtons-method g guess)
  (fixed-point (newton-transform g) guess))
(define (fixed-point-of-transform g transform guess)
  (fixed-point (transform g) guess))
(define (sqrt-newversion x)
  (fixed-point-of-transform (lambda (y) (/ x y)) average-dump 1.0))
