#lang sicp
(define (unique-pairs n)
  (accumulate append nil
              (map (lambda (x)
                     (map (lambda (y) (list x y))
                          (enumerate-interval 1 (- x 1))))
                   (enumerate-interval 1 n))))
(define (accumulate f base-value seq)
  (if (null? seq)
      base-value
      (f (car seq)
         (accumulate f base-value (sdr seq)))))
(define (enumerate f start end)
  (if (> start end)
      nil
      (append start
              (enumerate f (f start) end))))
(define (enumerate-interval start end)
  (enumerate (lambda (x) (+ x 1))
             start
             end))
